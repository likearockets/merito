package pl.wsb;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Warehouses extends Client implements Warehouse{

    int maxWarehouseCapacity = 10000;

    //hashmap z clientid i kolejną hashmap z metalem
    public Map<String, Map<SupportedMetalType, Double>> clientMetalInventory = new HashMap<>();

    @Override
    public void addMetalIngot(String clientId, SupportedMetalType metalType, double mass) throws ClientNotFoundException, ProhibitedMetalTypeException, FullWarehouseException {
        if (clientIDList.contains(Integer.parseInt(clientId))) {
            Map<SupportedMetalType, Double> clientInventory = clientMetalInventory.get(clientId);

            double totalVolumeOccupied = clientInventory.values().stream().mapToDouble(Double::doubleValue).sum();

            if (totalVolumeOccupied + (mass / metalType.getDensity()) > maxWarehouseCapacity) {
                throw new FullWarehouseException("Za duże obciążenie magazynu!");
            }

            clientInventory.put(metalType, clientInventory.getOrDefault(metalType, null) + mass);

        } else {
            throw new ClientNotFoundException("Nie istnieje taki klient!");
        }

    }

    @Override
    public Map<SupportedMetalType, Double> getMetalTypesToMassStoredByClient(String clientId) throws ClientNotFoundException{
        if (clientIDList.contains(Integer.parseInt(clientId))) {
            return clientMetalInventory.get(clientId);
        }
        else {
            throw new ClientNotFoundException("Nie istnieje taki klient!");
        }
    }

    @Override
    public double getTotalVolumeOccupiedByClient(String clientId) throws ClientNotFoundException{
        if (clientIDList.contains(Integer.parseInt(clientId))) {
            return clientMetalInventory.getOrDefault(clientId, new HashMap<>())
                    .values().stream().mapToDouble(Double::doubleValue).sum();
        }
        else {
            throw new ClientNotFoundException("Nie istnieje taki klient!");
        }
    }

    @Override
    public List<SupportedMetalType> getStoredMetalTypesByClient(String clientId) throws ClientNotFoundException{
        if (clientIDList.contains(Integer.parseInt(clientId))) {
            return List.copyOf(clientMetalInventory.getOrDefault(clientId, new HashMap<>()).keySet());
        }
        else {
            throw new ClientNotFoundException("Nie istnieje taki klient!");
        }
    }
}

